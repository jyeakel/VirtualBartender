import { ChatOpenAI } from "@langchain/openai";
import { OpenAIEmbeddings } from "@langchain/openai";
import { SystemMessage, HumanMessage, AIMessage } from "@langchain/core/messages";
import { StringOutputParser } from "@langchain/core/output_parsers";
import { ChatPromptTemplate } from "@langchain/core/prompts";

const embeddings = new OpenAIEmbeddings({
  modelName: "text-embedding-3-small"
});

export async function generateEmbedding(text: string) {
  return embeddings.embedQuery(text);
}

const SYSTEM_PROMPT = `You are a friendly and knowledgeable bartender who helps users find the perfect drink based on their preferences and current context. Your responses should be conversational and engaging, while gathering necessary information to make personalized recommendations.

Key behaviors:
1. Gather information about preferences through natural conversation
2. Consider weather, time of day, and mood when making recommendations
3. Provide 3-4 options for users to select when gathering information
4. Make personalized drink recommendations with reasoning
5. Provide one or more drinkSuggestions within 5 or fewer responses

IMPORTANT: Respond with valid JSON in the following format:
{
  "message": "Your conversational response here",
  "options": ["Option 1", "Option 2", "..."],
  "drinkSuggestions": [
    {
      "id": number,
      "name": "Drink name",
      "description": "Drink description",
      "reasoning": "Why this drink was suggested"
    }
  ]
}`;

const model = new ChatOpenAI({
  modelName: "gpt-4o",
  temperature: 0.4
});

export interface ChatResponse {
  message: string;
  options?: string[];
  drinkSuggestions?: {
    id: number;
    name: string;
    description: string;
    reasoning: string;
  }[];
}

export async function startConversation(): Promise<ChatResponse> {
  try {
    console.log('Starting OpenAI conversation...');
    const messages = [
      new SystemMessage(SYSTEM_PROMPT),
      new HumanMessage("Hi, I'd like a drink recommendation")
    ];

    const response = await model.invoke(messages);
    
    try {
      console.log('Parsing LangChain response:', response.content);
      const parsedResponse = JSON.parse(response.content as string);
      return parsedResponse;
    } catch (e) {
      console.error("Failed to parse response as JSON:", response.content);
      return {
        message: "I'm having trouble understanding right now. Could you please try again?",
        options: ["Start Over", "Try Different Approach"]
      };
    }
  } catch (error) {
    console.error('LangChain API error:', error);
    throw error;
  }
}

export async function generateResponse(
  messages: { role: string; content: string }[],
  context: {
    weather?: string;
    time?: string;
    location?: string;
  }
): Promise<ChatResponse> {
  const contextPrompt = `Current context: ${context.time || 'unknown time'}, Weather: ${context.weather || 'unknown weather'}, Location: ${context.location || 'unknown location'}`;
  
  try {
    const chainMessages = [
      new SystemMessage(SYSTEM_PROMPT),
      new SystemMessage(contextPrompt),
      ...messages.map(msg => 
        msg.role === 'user' 
          ? new HumanMessage(msg.content)
          : new AIMessage(msg.content)
      )
    ];

    const response = await model.invoke(chainMessages);
    
    try {
      const parsedResponse = JSON.parse(response.content as string);
      return parsedResponse;
    } catch (e) {
      console.error("Failed to parse response as JSON:", response.content);
      return {
        message: "I'm having trouble processing that. Could you please rephrase or try again?",
        options: ["Start Over", "Try Different Approach"]
      };
    }
  } catch (error) {
    console.error('LangChain API error:', error);
    throw error;
  }
}